import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as e,b as t,o as r}from"./app-kRXLCKCy.js";const i={};function u(l,n){return r(),s("div",null,[...n[0]||(n[0]=[e("p",null,[t("Mtn qu'on a les structures de données, on passe à tout ce qui est business logic donc endpoints et cruds."),e("br"),t(" Honnêtement je sais pas ds quel ordre on les présente...")],-1),e("p",null,"Les endpoints c là où on utilise le router FastAPI, faut expliquer que le @ c un décorateur faut pas en avoir peur c de la composition de fonction, faut parler des codes d'erreurs (les classes 200 à 500, et certains spécifiques qu'on utilise souvent comme 403, 404, 422, etc), expliquer que c là que les données qui entrent et sortent d'Hyperion sont validées (d'où le 422 si on envoie de la merde).",-1),e("p",null,"Peut-être le fait que le JSON correspond à une classe avec que des attributs c pas obvious.",-1),e("p",null,"Faire un point sur les dependencies, c comme ça qu'on récupère l'user qui a émis la requête, et la (session à la) db.",-1),e("p",null,[t("A propos de db, c là qu'on appelle les cruds (ça sera la page d'après) et qu'on utilise nos meilleurs "),e("code",null,"db.flush()"),t(".")],-1),e("p",null,`Ms faut appuyer sur le fait que les endpoints c là que se trouve quasiment toute la logique (la business logic, je crois que c "logique métier" en Fr ms ça sonne pas ouf), donc la plupart des lignes d'un endpoint c vérifier que telle et telle condition est bien remplie, que tel truc est ou n'est pas None, et pour gérer ces cas on sort nos meilleurs HTTPException : c des exceptions Python (donc qui font terminer la fonction) et ça renvoie à l'extérieur le code d'erreur qu'on a choisi.`,-1)])])}const p=o(i,[["render",u]]),d=JSON.parse(`{"path":"/hyperion/module/endpoints.html","title":"Endpoints","lang":"fr-FR","frontmatter":{"title":"Endpoints","order":3,"category":["Guide"],"description":"Mtn qu'on a les structures de données, on passe à tout ce qui est business logic donc endpoints et cruds. Honnêtement je sais pas ds quel ordre on les présente... Les endpoints ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Endpoints\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-13T13:27:53.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aeecleclair\\",\\"url\\":\\"https://github.com/aeecleclair/\\"}]}"],["meta",{"property":"og:url","content":"https://docs.myecl.fr/hyperion/module/endpoints.html"}],["meta",{"property":"og:site_name","content":"MyECL - ÉCLAIR"}],["meta",{"property":"og:title","content":"Endpoints"}],["meta",{"property":"og:description","content":"Mtn qu'on a les structures de données, on passe à tout ce qui est business logic donc endpoints et cruds. Honnêtement je sais pas ds quel ordre on les présente... Les endpoints ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"fr-FR"}],["meta",{"property":"og:updated_time","content":"2025-09-13T13:27:53.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T13:27:53.000Z"}]]},"git":{"createdTime":1757770073000,"updatedTime":1757770073000,"contributors":[{"name":"Marc-Andrieu","username":"Marc-Andrieu","email":"marc.andrieu@outlook.com","commits":1,"url":"https://github.com/Marc-Andrieu"}]},"readingTime":{"minutes":1.85,"words":278},"filePathRelative":"hyperion/module/endpoints.md","autoDesc":true}`);export{p as comp,d as data};
