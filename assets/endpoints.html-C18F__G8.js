import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as n,o as s}from"./app-BdCrXLF5.js";const r={};function i(u,e){return s(),o("div",null,[...e[0]||(e[0]=[n("<p>Mtn qu&#39;on a les structures de données, on passe à tout ce qui est business logic donc endpoints et<br> cruds. Honnêtement je sais pas ds quel ordre on les présente...</p><p>Les endpoints c là où on utilise le router FastAPI, faut expliquer que le @ c un décorateur faut pas<br> en avoir peur c de la composition de fonction, faut parler des codes d&#39;erreurs (les classes 200 à<br> 500, et certains spécifiques qu&#39;on utilise souvent comme 403, 404, 422, etc), expliquer que c là que<br> les données qui entrent et sortent d&#39;Hyperion sont validées (d&#39;où le 422 si on envoie de la merde).</p><p>Peut-être le fait que le JSON correspond à une classe avec que des attributs c pas obvious.</p><p>Faire un point sur les dependencies, c comme ça qu&#39;on récupère l&#39;user qui a émis la requête, et la<br> (session à la) db.</p><p>A propos de db, c là qu&#39;on appelle les cruds (ça sera la page d&#39;après) et qu&#39;on utilise nos<br> meilleurs <code>db.flush()</code>.</p><p>Ms faut appuyer sur le fait que les endpoints c là que se trouve quasiment toute la logique (la<br> business logic, je crois que c &quot;logique métier&quot; en Fr ms ça sonne pas ouf), donc la plupart des<br> lignes d&#39;un endpoint c vérifier que telle et telle condition est bien remplie, que tel truc est ou<br> n&#39;est pas None, et pour gérer ces cas on sort nos meilleurs HTTPException : c des exceptions Python<br> (donc qui font terminer la fonction) et ça renvoie à l&#39;extérieur le code d&#39;erreur qu&#39;on a choisi.</p>",6)])])}const c=t(r,[["render",i]]),l=JSON.parse(`{"path":"/hyperion/module/endpoints.html","title":"Endpoints","lang":"fr-FR","frontmatter":{"title":"Endpoints","order":3,"category":["Guide"],"description":"Mtn qu'on a les structures de données, on passe à tout ce qui est business logic donc endpoints et cruds. Honnêtement je sais pas ds quel ordre on les présente... Les endpoints ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Endpoints\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-13T22:27:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Aeecleclair\\",\\"url\\":\\"https://github.com/aeecleclair/\\"}]}"],["meta",{"property":"og:url","content":"https://docs.myecl.fr/hyperion/module/endpoints.html"}],["meta",{"property":"og:site_name","content":"MyECL - ÉCLAIR"}],["meta",{"property":"og:title","content":"Endpoints"}],["meta",{"property":"og:description","content":"Mtn qu'on a les structures de données, on passe à tout ce qui est business logic donc endpoints et cruds. Honnêtement je sais pas ds quel ordre on les présente... Les endpoints ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"fr-FR"}],["meta",{"property":"og:updated_time","content":"2025-09-13T22:27:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-13T22:27:16.000Z"}]]},"git":{"createdTime":1757770073000,"updatedTime":1757802436000,"contributors":[{"name":"Marc-Andrieu","username":"Marc-Andrieu","email":"marc.andrieu@outlook.com","commits":2,"url":"https://github.com/Marc-Andrieu"}]},"readingTime":{"minutes":1.85,"words":278},"filePathRelative":"hyperion/module/endpoints.md","autoDesc":true}`);export{c as comp,l as data};
